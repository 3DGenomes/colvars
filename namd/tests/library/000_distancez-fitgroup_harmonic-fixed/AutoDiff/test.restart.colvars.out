colvars: ----------------------------------------------------------------------
colvars: ----------------------------------------------------------------------
colvars: Reading new configuration from file "test.legacy.in":
colvars: # indexFile = index.ndx
colvars: The following index groups were read from the index file "index.ndx":
colvars:   Protein (104 atoms).
colvars:   Protein_noH (51 atoms).
colvars:   Protein_Backbone (40 atoms).
colvars:   Protein_C-alpha (10 atoms).
colvars:   RMSD_atoms (10 atoms).
colvars:   Protein_C-alpha_1_2 (2 atoms).
colvars:   Protein_C-alpha_9_10 (2 atoms).
colvars:   Protein_C-alpha_1 (1 atoms).
colvars:   group1 (4 atoms).
colvars:   Protein_C-alpha_2 (1 atoms).
colvars:   group2 (4 atoms).
colvars:   Protein_C-alpha_3 (1 atoms).
colvars:   group3 (4 atoms).
colvars:   Protein_C-alpha_4 (1 atoms).
colvars:   group4 (4 atoms).
colvars:   Protein_C-alpha_5 (1 atoms).
colvars:   group5 (4 atoms).
colvars:   Protein_C-alpha_6 (1 atoms).
colvars:   group6 (4 atoms).
colvars:   Protein_C-alpha_7 (1 atoms).
colvars:   group7 (4 atoms).
colvars:   Protein_C-alpha_8 (1 atoms).
colvars:   group8 (4 atoms).
colvars:   Protein_C-alpha_9 (1 atoms).
colvars:   group9 (4 atoms).
colvars:   Protein_C-alpha_10 (1 atoms).
colvars:   group10 (4 atoms).
colvars:   heavy_atoms (51 atoms).
colvars: # analysis = off [default]
colvars: # colvarsTrajFrequency = 1
colvars: # colvarsRestartFrequency = 10
colvars: # colvarsTrajAppend = off [default]
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new collective variable.
colvars:   # name = one
colvars:   Initializing a new "distanceZ" component.
colvars:     # componentCoeff = 1 [default]
colvars:     # componentExp = 1 [default]
colvars:     # period = 0 [default]
colvars:     # wrapAround = 0 [default]
colvars:       Initializing atom group "main".
colvars:       # indexGroup = group5
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # centerReference = on
colvars:       # rotateReference = on
colvars:       # enableFitGradients = on [default]
colvars:       Within atom group "main":
colvars:       Defining atom group "refPositionsGroup".
colvars:         Initializing atom group "refPositionsGroup".
colvars:         # indexGroup = heavy_atoms
colvars:         # psfSegID =  [default]
colvars:         # atomsFile = "" [default]
colvars:         # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:         # enableForces = on [default]
colvars:         # centerReference = off [default]
colvars:         # rotateReference = off [default]
colvars:         # enableFitGradients = on [default]
colvars:         Atom group "refPositionsGroup" defined, 51 atoms initialized: total mass = 674.397.
colvars:       # refPositions =  [default]
colvars:       # refPositionsFile = heavy_atoms_refpos.xyz
colvars:       # refPositionsCol = "" [default]
colvars:       Warning: atom group "main" will be aligned to a fixed orientation given by the reference positions provided.  If the internal structure of the group changes too much (i.e. its RMSD is comparable to its radius of gyration), the optimal rotation and its gradients may become discontinuous.  If that happens, use refPositionsGroup (or a different definition for it if already defined) to align the coordinates.
colvars:       Atom group "main" defined, 4 atoms initialized: total mass = 54.028.
colvars:       Initializing atom group "ref".
colvars:       # indexGroup = group1
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # centerReference = on
colvars:       # rotateReference = on
colvars:       # enableFitGradients = on [default]
colvars:       Within atom group "ref":
colvars:       Defining atom group "refPositionsGroup".
colvars:         Initializing atom group "refPositionsGroup".
colvars:         # indexGroup = heavy_atoms
colvars:         # psfSegID =  [default]
colvars:         # atomsFile = "" [default]
colvars:         # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:         # enableForces = on [default]
colvars:         # centerReference = off [default]
colvars:         # rotateReference = off [default]
colvars:         # enableFitGradients = on [default]
colvars:         Atom group "refPositionsGroup" defined, 51 atoms initialized: total mass = 674.397.
colvars:       # refPositions =  [default]
colvars:       # refPositionsFile = heavy_atoms_refpos.xyz
colvars:       # refPositionsCol = "" [default]
colvars:       Warning: atom group "ref" will be aligned to a fixed orientation given by the reference positions provided.  If the internal structure of the group changes too much (i.e. its RMSD is comparable to its radius of gyration), the optimal rotation and its gradients may become discontinuous.  If that happens, use refPositionsGroup (or a different definition for it if already defined) to align the coordinates.
colvars:       Atom group "ref" defined, 4 atoms initialized: total mass = 54.028.
colvars:       Initializing atom group "ref2".
colvars:       # indexGroup = group10
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # centerReference = on
colvars:       # rotateReference = on
colvars:       # enableFitGradients = on [default]
colvars:       Within atom group "ref2":
colvars:       Defining atom group "refPositionsGroup".
colvars:         Initializing atom group "refPositionsGroup".
colvars:         # indexGroup = heavy_atoms
colvars:         # psfSegID =  [default]
colvars:         # atomsFile = "" [default]
colvars:         # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:         # enableForces = on [default]
colvars:         # centerReference = off [default]
colvars:         # rotateReference = off [default]
colvars:         # enableFitGradients = on [default]
colvars:         Atom group "refPositionsGroup" defined, 51 atoms initialized: total mass = 674.397.
colvars:       # refPositions =  [default]
colvars:       # refPositionsFile = heavy_atoms_refpos.xyz
colvars:       # refPositionsCol = "" [default]
colvars:       Warning: atom group "ref2" will be aligned to a fixed orientation given by the reference positions provided.  If the internal structure of the group changes too much (i.e. its RMSD is comparable to its radius of gyration), the optimal rotation and its gradients may become discontinuous.  If that happens, use refPositionsGroup (or a different definition for it if already defined) to align the coordinates.
colvars:       Atom group "ref2" defined, 4 atoms initialized: total mass = 54.028.
colvars:     Using axis joining the centers of mass of groups "ref" and "ref2"
colvars:     # forceNoPBC = off [default]
colvars:     # oneSiteSystemForce = off [default]
colvars:   All components initialized.
colvars:   # width = 0.5
colvars:   # lowerBoundary = 0 [default]
colvars:   # lowerWallConstant = 0 [default]
colvars:   # upperBoundary = 0 [default]
colvars:   # upperWallConstant = 0 [default]
colvars:   # expandBoundaries = off [default]
colvars:   # extendedLagrangian = off [default]
colvars:   # outputValue = on [default]
colvars:   # outputVelocity = off [default]
colvars:   # outputSystemForce = off [default]
colvars:   # outputAppliedForce = on
colvars: ----------------------------------------------------------------------
colvars: Collective variables initialized, 1 in total.
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new "harmonic" instance.
colvars:   # name = "harmonic1" [default]
colvars:   # colvars = { one }
colvars:   # outputEnergy = off [default]
colvars:   # forceConstant = 0.001
colvars:   # centers = { 0.1 }
colvars:   # targetCenters = { 0.1 } [default]
colvars:   # targetForceConstant = 0 [default]
colvars:   # outputCenters = off [default]
colvars:   The force constant for colvar "one" will be rescaled to 0.004 according to the specified width.
colvars: ----------------------------------------------------------------------
colvars: Collective variables biases initialized, 1 in total.
colvars: ----------------------------------------------------------------------
colvars: Collective variables module (re)initialized.
colvars: ----------------------------------------------------------------------
colvars: Restarting from file "test.colvars.state".
colvars:   Restarting collective variable "one" from value: -1.08397
colvars:   Restarting restraint bias "harmonic1".
colvars: ----------------------------------------------------------------------
colvars: The restart output state file will be "test.restart.tmp.colvars.state".
colvars: The final output state file will be "test.restart.colvars.state".
colvars: Writing to colvar trajectory file "test.restart.colvars.traj".
colvars: Writing the state file "test.restart.tmp.colvars.state".
colvars: Synchronizing (emptying the buffer of) trajectory file "test.restart.colvars.traj".
colvars: Writing the state file "test.restart.tmp.colvars.state".
colvars: Synchronizing (emptying the buffer of) trajectory file "test.restart.colvars.traj".
colvars: Saving collective variables state to "test.restart.colvars.state".
