colvars: ----------------------------------------------------------------------
colvars: ----------------------------------------------------------------------
colvars: Reading new configuration from file "test.in":
colvars: # indexFile = index.ndx
colvars: The following index groups were read from the index file "index.ndx":
colvars:   System (104 atoms).
colvars:   Protein (104 atoms).
colvars:   Protein-H (51 atoms).
colvars:   C-alpha (10 atoms).
colvars: # analysis = off [default]
colvars: # colvarsTrajFrequency = 1
colvars: # colvarsRestartFrequency = 2000
colvars: # colvarsTrajAppend = off [default]
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new collective variable.
colvars:   # name = rmsdA
colvars:   Initializing a new "rmsd" component.
colvars:     # componentCoeff = 1 [default]
colvars:     # componentExp = 1 [default]
colvars:     # period = 0 [default]
colvars:     # wrapAround = 0 [default]
colvars:       Initializing atom group "atoms".
colvars:       # indexGroup = C-alpha
colvars:       # psfSegID =  [default]
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # centerReference = off [default]
colvars:       # rotateReference = off [default]
colvars:       # enableFitGradients = on [default]
colvars:       Atom group "atoms" defined, 10 atoms initialized: total mass = 120.11, total charge = 0.53.
colvars:     # refPositions =  [default]
colvars:     # refPositionsFile = ../Common/da.pdb
colvars:     # refPositionsCol = "" [default]
colvars:     Enabling "centerReference" and "rotateReference", to minimize RMSD before calculating it as a variable: if this is not the desired behavior, disable them explicitly within the "atoms" block.
colvars:     This is a standard minimum RMSD, derivatives of the optimal rotation will not be computed as they cancel out in the gradients.
colvars:   All components initialized.
colvars:   # width = 1
colvars:   # lowerBoundary = 0
colvars:   # lowerWallConstant = 100
colvars:   # lowerWall = 0 [default]
colvars:   # upperBoundary = 5
colvars:   # upperWallConstant = 100
colvars:   # upperWall = 5 [default]
colvars:   # hardLowerBoundary = off [default]
colvars:   # hardUpperBoundary = off [default]
colvars:   # expandBoundaries = off [default]
colvars:   # extendedLagrangian = off [default]
colvars:   # outputValue = on [default]
colvars:   # outputVelocity = off [default]
colvars:   # outputSystemForce = on
colvars:   # outputAppliedForce = off [default]
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new collective variable.
colvars:   # name = rmsdB
colvars:   Initializing a new "rmsd" component.
colvars:     # componentCoeff = 1 [default]
colvars:     # componentExp = 1 [default]
colvars:     # period = 0 [default]
colvars:     # wrapAround = 0 [default]
colvars:       Initializing atom group "atoms".
colvars:       # indexGroup = "" [default]
colvars:       # psfSegID = { BH }
colvars:       # atomsFile = "" [default]
colvars:       # dummyAtom = ( 0 , 0 , 0 ) [default]
colvars:       # enableForces = on [default]
colvars:       # centerReference = off [default]
colvars:       # rotateReference = off [default]
colvars:       # enableFitGradients = on [default]
colvars:       Atom group "atoms" defined, 10 atoms initialized: total mass = 120.11, total charge = 0.53.
colvars:     # refPositions =  [default]
colvars:     # refPositionsFile = ../Common/da.pdb
colvars:     # refPositionsCol = "" [default]
colvars:     Enabling "centerReference" and "rotateReference", to minimize RMSD before calculating it as a variable: if this is not the desired behavior, disable them explicitly within the "atoms" block.
colvars:     This is a standard minimum RMSD, derivatives of the optimal rotation will not be computed as they cancel out in the gradients.
colvars:   All components initialized.
colvars:   # width = 1
colvars:   # lowerBoundary = 0
colvars:   # lowerWallConstant = 100
colvars:   # lowerWall = 0 [default]
colvars:   # upperBoundary = 5
colvars:   # upperWallConstant = 100
colvars:   # upperWall = 5 [default]
colvars:   # hardLowerBoundary = off [default]
colvars:   # hardUpperBoundary = off [default]
colvars:   # expandBoundaries = off [default]
colvars:   # extendedLagrangian = off [default]
colvars:   # outputValue = on [default]
colvars:   # outputVelocity = off [default]
colvars:   # outputSystemForce = on
colvars:   # outputAppliedForce = off [default]
colvars: ----------------------------------------------------------------------
colvars: Collective variables initialized, 2 in total.
colvars: ----------------------------------------------------------------------
colvars:   Initializing a new "harmonic" instance.
colvars:   # name = "harmonic1" [default]
colvars:   # colvars = { rmsdA, rmsdB }
colvars:   # outputEnergy = off [default]
colvars:   # forceConstant = 1
colvars:   # centers = { 0, 0 }
colvars:   # targetCenters = { 0, 0 } [default]
colvars:   # targetForceConstant = 0 [default]
colvars:   # outputCenters = off [default]
colvars: ----------------------------------------------------------------------
colvars: Collective variables biases initialized, 1 in total.
colvars: ----------------------------------------------------------------------
colvars: Collective variables module (re)initialized.
colvars: ----------------------------------------------------------------------
colvars: The final output state file will be "test.colvars.state".
colvars: Writing to colvar trajectory file "test.colvars.traj".
colvars: Saving collective variables state to "test.colvars.state".
